{"ast":null,"code":"var _jsxFileName = \"/Users/diogogemaque/Documents/Node Js TI Academy/modulo4/src/pages/Servico/Servico0/index.js\",\n    _s = $RefreshSig$();\n\n//ir na aplicação Controller.js alguma aplicação que tenha servico, que seja um GET e q seja passado por um id. Testar no postman, substituir o id pelo numero do servico desejado para trazer as informações somente do servico escolhido.\n//p/ realizar essa operação precisamos criar outro componente (Nova pasta - Servico0) dentro da pasta Servico e dentro da pasta Servico0 criar o index.js - sempre que for criar um componente novo criar uma pasta e um index pq esse componente será renderizado de uma forma diferente do componente anterior\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Alert, Container } from \"reactstrap\";\nimport { api } from \"../../../config\"; //confirmar se a aplicação esta recebendo o numero id como parâmetro na url. o parâmetro dessa func vai ser (props) para isso precisamos saber qual é essa propriedade do props (console.log(props.match.params.id))- nao esquecer de informar na rota o parâmetro :id\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Servico0 = props => {\n  _s();\n\n  //console.log(props.match.params.id); o match vai fazer uma relação do parâmetro da propriedade (props) com o parâmetro do id \n  //const que vai retornar um conjunto de dados e setData o useState que vai retornar uma lista/array vazio - A const vai receber um array de informações, onde o data é o valor e setData é o valor que eu vou atribuir. o useState vai dizer qual é o estado inicial desse array um vai ta vazio o outro vai iniciar com o id, ou seja, o dado inicial é o id passado pelo parâmetro.\n  const [data, setData] = useState([]); //trabalhar tb com a const do id e setID com um useState que vai informar o parâmetro do console.log ou seja vou receber um conjunto de dados e vou precisar do dados que foi passado como parâmetro na minha rota. \n\n  const [id] = useState(props.match.params.id);\n  const [status, setStatus] = useState({\n    type: '',\n    message: ''\n  }); //useEffect é uma função que nao recebe parâmetros e tem uma função get p/ obter o Servico (const getServico) é uma func async e vai receber o axios get por conta do get que foi usado no postman, portanto o api concatena com a pagina url do postman que foi feita no controller.js e concatena tb o id que vai ser escolhido pelo navegador isso forma a rota da execução. Se isso for possivel vai ter uma resposta (response)\n\n  useEffect(() => {\n    const getServico = async () => {\n      await axios.get(api + \"/servico/\" + id).then(response => {\n        //console.log(response.data.servico)\n        //setData que vai pegar os dados do servico no controller e mostrar na pagina\n        setData(response.data.servico);\n      }) //caso de errado o catch vai tratar dessa parada\n      .catch(() => {\n        setStatus({\n          type: 'error',\n          message: 'Erro: Não foi possível conectar a API.'\n        });\n      });\n    }; //a func getServio vai retornar um conj de dados com base no id que precisa ser inserido dentro do array [] entre a virgula e o parenteses para instanciar a função\n\n\n    getServico();\n  }, [id]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mr-auto p-2\",\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Informa\\xE7\\xF5es do Servi\\xE7o\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-2\",\n          children: [/*#__PURE__*/_jsxDEV(Link, {\n            to: \"/visualizarservico\",\n            className: \"btn btn-outline-success btn-sm m-2\",\n            children: \"Voltar para a lista de Servi\\xE7os\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/editarservico/\" + data.id,\n            className: \"btn btn-outline-warning btn-sm\",\n            children: \"Editar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"m1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), status.type === 'error' ? /*#__PURE__*/_jsxDEV(Alert, {\n        color: \"danger\",\n        children: status.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 65\n      }, this) : \"\", /*#__PURE__*/_jsxDEV(\"dl\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(\"dt\", {\n          className: \"col-sm-3\",\n          children: \"Nome\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"dd\", {\n          className: \"col-sm-9\",\n          children: data.nome\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"dl\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(\"dt\", {\n          className: \"col-sm-3\",\n          children: \"Descri\\xE7\\xE3o\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"dd\", {\n          className: \"col-sm-9\",\n          children: data.descricao\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Servico0, \"VjRJ8fzWWeMRE2AkhmyfRXoJMA8=\");\n\n_c = Servico0;\n\nvar _c;\n\n$RefreshReg$(_c, \"Servico0\");","map":{"version":3,"sources":["/Users/diogogemaque/Documents/Node Js TI Academy/modulo4/src/pages/Servico/Servico0/index.js"],"names":["axios","useEffect","useState","Link","Alert","Container","api","Servico0","props","data","setData","id","match","params","status","setStatus","type","message","getServico","get","then","response","servico","catch","nome","descricao"],"mappings":"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","sourcesContent":["//ir na aplicação Controller.js alguma aplicação que tenha servico, que seja um GET e q seja passado por um id. Testar no postman, substituir o id pelo numero do servico desejado para trazer as informações somente do servico escolhido.\n//p/ realizar essa operação precisamos criar outro componente (Nova pasta - Servico0) dentro da pasta Servico e dentro da pasta Servico0 criar o index.js - sempre que for criar um componente novo criar uma pasta e um index pq esse componente será renderizado de uma forma diferente do componente anterior\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Alert, Container } from \"reactstrap\";\nimport { api } from \"../../../config\";\n\n//confirmar se a aplicação esta recebendo o numero id como parâmetro na url. o parâmetro dessa func vai ser (props) para isso precisamos saber qual é essa propriedade do props (console.log(props.match.params.id))- nao esquecer de informar na rota o parâmetro :id\nexport const Servico0 = (props) => {\n    //console.log(props.match.params.id); o match vai fazer uma relação do parâmetro da propriedade (props) com o parâmetro do id \n\n    //const que vai retornar um conjunto de dados e setData o useState que vai retornar uma lista/array vazio - A const vai receber um array de informações, onde o data é o valor e setData é o valor que eu vou atribuir. o useState vai dizer qual é o estado inicial desse array um vai ta vazio o outro vai iniciar com o id, ou seja, o dado inicial é o id passado pelo parâmetro.\n    const [data, setData] = useState([]);\n    //trabalhar tb com a const do id e setID com um useState que vai informar o parâmetro do console.log ou seja vou receber um conjunto de dados e vou precisar do dados que foi passado como parâmetro na minha rota. \n    const [id] = useState(props.match.params.id);\n    const [status, setStatus] = useState({\n        type: '',\n        message: ''\n    });\n\n    //useEffect é uma função que nao recebe parâmetros e tem uma função get p/ obter o Servico (const getServico) é uma func async e vai receber o axios get por conta do get que foi usado no postman, portanto o api concatena com a pagina url do postman que foi feita no controller.js e concatena tb o id que vai ser escolhido pelo navegador isso forma a rota da execução. Se isso for possivel vai ter uma resposta (response)\n    useEffect(() => {\n        const getServico = async () => {\n            await axios.get(api+\"/servico/\"+id)\n                .then((response) => {\n                    //console.log(response.data.servico)\n                    //setData que vai pegar os dados do servico no controller e mostrar na pagina\n                    setData(response.data.servico)\n                })\n                //caso de errado o catch vai tratar dessa parada\n                .catch(() => {\n                    setStatus({\n                        type: 'error',\n                        message: 'Erro: Não foi possível conectar a API.'\n                    })\n                })\n        }\n        //a func getServio vai retornar um conj de dados com base no id que precisa ser inserido dentro do array [] entre a virgula e o parenteses para instanciar a função\n        getServico();\n    }, [id]);\n\n    return (\n        <div>\n            <Container>\n                <div className=\"d-flex\">\n                    <div className=\"mr-auto p-2\">\n                        <h1>Informações do Serviço</h1>\n                    </div>\n                    <div className=\"p-2\">\n                        <Link to=\"/visualizarservico\" className=\"btn btn-outline-success btn-sm m-2\">Voltar para a lista de Serviços</Link>\n                        <Link to={\"/editarservico/\" + data.id}\n                            className=\"btn btn-outline-warning btn-sm\">Editar</Link>\n                    </div>\n                </div>\n\n                {/* tratamento do erro */}\n                <hr className=\"m1\" />{status.type === 'error' ? <Alert color=\"danger\">{status.message}</Alert> : \"\"}\n\n                {/* dl vai fluncionar como uma tabela o className row vai exibir as informacoes em linha, cada linha vai ter um conjunto de informacões dt */}\n                <dl className=\"row\">\n                    {/* dt vai pegar as informacoes do servico col-sm-3 definicao de tamanho. como o ID ta sendo recebido nao vai ser preciso exibir */}\n                    <dt className=\"col-sm-3\">Nome</dt>\n                    {/* dd=dados de onde vem o nome? vem da base de dados data do campo nome */}\n                    <dd className=\"col-sm-9\">{data.nome}</dd>\n                </dl>\n                <dl className=\"row\">\n                    <dt className=\"col-sm-3\">Descrição</dt>\n                    <dd className=\"col-sm-9\">{data.descricao}</dd>\n                </dl>\n            </Container>\n        </div>\n\n    )\n}"]},"metadata":{},"sourceType":"module"}