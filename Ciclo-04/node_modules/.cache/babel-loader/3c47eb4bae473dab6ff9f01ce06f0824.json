{"ast":null,"code":"var _jsxFileName = \"/Users/diogogemaque/Documents/Node Js TI Academy/modulo4/src/pages/Servico/CadastrarServico/index.js\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Alert, Button, Container, Form, FormGroup, Input, Label, Spinner } from \"reactstrap\";\nimport { api } from \"../../../config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CadastrarServico = () => {\n  _s();\n\n  //o VIEW(Pages), CONTROLLER E MODEL os 3 estão dentro da aplicação o Model da aplicação vai conversar com algo externo que é o Banco de Dados (BD). Os dados do BD (referente as migrations) sobem no modelo do Model (cliente.js, servico.js e pedido.js da api). O Controller vai trabalhar com os serviços (Funcionalidades) e pegar os dados que estão no Views(pages) e trabalhar como objeto de dados (DTO - data transfer object). DTO é igual ao Model quando os serviços são transformados em DTO e mandado para o Model e o model manda pra o BD. o Controller se relaciona com o Servico e o DTO isso garante segurança quando os dados forem pro BD.   \n  //Vamos pegar os dados da Page e transformar em DTO. \n  //nessa funcao a const vai receber os dados servico(GET que vai obter) e setServico(set vai inserir) vai ser usado a funcao useState que vai criar algo exatamente igual ao objeto     \n  const [servico, setServico] = useState({\n    nome: '',\n    descricao: ''\n  });\n  const [status, setStatus] = useState({\n    formSave: false,\n    type: '',\n    message: ''\n  }); //com objeto criado, vai ser criada uma funcao de entrada (valorInput que vai ser o evento clique no botão [e - p/ representar q é um evento] ). o setServico é uma funcao que vai cadastrar o objeto que vai passar todas as informações do servico, o servico retorna um obejto (os ... representa todo o objeto do servico(nome e descricao) nome do atributo e valor do atributo o target.name vai pegar o nome e a descricao que estão no objeto e o target.value vai atribuir os valores que são inseridos pelo no valorInput lá do formulário. Os(:)representa atribuição).  \n\n  const valorInput = e => setServico({ ...servico,\n    [e.target.name]: e.target.value\n  }); //o evento \"e\" (que poderia ser qualquer letra) vai fazer com que a página não recarregue após clicar no cadastrar. o evento vai utilizar a função preventDefault(). A partir do uso dessa função a tela não vai carregar após o clique no botão\n\n\n  const cadServico = async e => {\n    console.log(servico);\n    e.preventDefault();\n    setStatus({\n      formSave: true\n    }); //a const headers vai receber um conteúdo q vai ser no formato json que vai ser encaminhado pela propria aplicacao. \n\n    const headers = {\n      'Content-Type': 'application/json'\n    }; //inserção - o que será passado de inf? duas inf. o objeto servico e a os headers (conj de argumentos que estão no valorInput) \n\n    await axios.post(api + \"/servicos\", servico, {\n      headers\n    }).then(response => {\n      if (response.data.error) {\n        setStatus({\n          //formSave: false,\n          type: 'error',\n          message: response.data.message\n        });\n      } else {\n        setStatus({\n          //                 formSave: false,\n          type: 'success',\n          message: response.data.message\n        });\n      }\n    }) //o catch vai tratar o erro -> o setStatus vai escrever qual erro ocorreu dentro do type e da message\n    .catch(() => {\n      setStatus({\n        //             formSave: false,\n        type: 'error',\n        message: 'Erro: não conect ao API'\n      });\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"m-auto p-2\",\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Cadastrar Servi\\xE7o\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-2\",\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/visualizarservico\",\n            className: \"btn btn-outline-success btn-sm\",\n            children: \"Voltar para a lista de Servi\\xE7os\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"m-1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), status.type === 'error' ? /*#__PURE__*/_jsxDEV(Alert, {\n        color: \"danger\",\n        children: status.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 44\n      }, this) : \"\", status.type === 'success' ? /*#__PURE__*/_jsxDEV(Alert, {\n        color: \"success\",\n        children: status.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 46\n      }, this) : \"\", /*#__PURE__*/_jsxDEV(Form, {\n        className: \"p-2\",\n        onSubmit: cadServico,\n        children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n          className: \"p-2\",\n          children: [/*#__PURE__*/_jsxDEV(Label, {\n            children: \"Nome\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            type: \"text\",\n            name: \"nome\",\n            placeholder: \"Insira o nome do servi\\xE7o\",\n            onChange: valorInput\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n          className: \"p-2\",\n          children: [/*#__PURE__*/_jsxDEV(Label, {\n            children: \"Descri\\xE7\\xE3o\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            type: \"text\",\n            name: \"descricao\",\n            placeholder: \"Insira a descri\\xE7\\xE3o do servi\\xE7o\",\n            onChange: valorInput\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          outline: true,\n          color: \"success\",\n          children: \"Cadastrar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CadastrarServico, \"qOD1Suun9Owl/ttEfxC4gIaOfiA=\");\n\n_c = CadastrarServico;\n\nvar _c;\n\n$RefreshReg$(_c, \"CadastrarServico\");","map":{"version":3,"sources":["/Users/diogogemaque/Documents/Node Js TI Academy/modulo4/src/pages/Servico/CadastrarServico/index.js"],"names":["axios","useState","Link","Alert","Button","Container","Form","FormGroup","Input","Label","Spinner","api","CadastrarServico","servico","setServico","nome","descricao","status","setStatus","formSave","type","message","valorInput","e","target","name","value","cadServico","console","log","preventDefault","headers","post","then","response","data","error","catch"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,KAAT,EAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,IAAnC,EAAyCC,SAAzC,EAAoDC,KAApD,EAA2DC,KAA3D,EAAkEC,OAAlE,QAAiF,YAAjF;AACA,SAASC,GAAT,QAAoB,iBAApB;;AAEA,OAAO,MAAMC,gBAAgB,GAAG,MAAM;AAAA;;AAClC;AACA;AACA;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC;AACnCc,IAAAA,IAAI,EAAE,EAD6B;AAEnCC,IAAAA,SAAS,EAAE;AAFwB,GAAD,CAAtC;AAKA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBjB,QAAQ,CAAC;AACjCkB,IAAAA,QAAQ,EAAE,KADuB;AAEjCC,IAAAA,IAAI,EAAE,EAF2B;AAGjCC,IAAAA,OAAO,EAAE;AAHwB,GAAD,CAApC,CATkC,CAclC;;AACA,QAAMC,UAAU,GAAGC,CAAC,IAAIT,UAAU,CAAC,EAAE,GAAGD,OAAL;AAAc,KAACU,CAAC,CAACC,MAAF,CAASC,IAAV,GAAiBF,CAAC,CAACC,MAAF,CAASE;AAAxC,GAAD,CAAlC,CAfkC,CAiBlC;;;AACA,QAAMC,UAAU,GAAG,MAAMJ,CAAN,IAAW;AAC1BK,IAAAA,OAAO,CAACC,GAAR,CAAYhB,OAAZ;AACAU,IAAAA,CAAC,CAACO,cAAF;AAEAZ,IAAAA,SAAS,CAAC;AACTC,MAAAA,QAAQ,EAAC;AADA,KAAD,CAAT,CAJ0B,CAQ1B;;AACA,UAAMY,OAAO,GAAG;AACZ,sBAAgB;AADJ,KAAhB,CAT0B,CAa1B;;AACA,UAAM/B,KAAK,CAACgC,IAAN,CAAWrB,GAAG,GAAG,WAAjB,EAA8BE,OAA9B,EAAuC;AAAEkB,MAAAA;AAAF,KAAvC,EACDE,IADC,CACKC,QAAD,IAAc;AAChB,UAAIA,QAAQ,CAACC,IAAT,CAAcC,KAAlB,EAAyB;AACrBlB,QAAAA,SAAS,CAAC;AACN;AACAE,UAAAA,IAAI,EAAE,OAFA;AAGNC,UAAAA,OAAO,EAAEa,QAAQ,CAACC,IAAT,CAAcd;AAHjB,SAAD,CAAT;AAKH,OAND,MAMO;AACHH,QAAAA,SAAS,CAAC;AACN;AACAE,UAAAA,IAAI,EAAE,SAFA;AAGNC,UAAAA,OAAO,EAAEa,QAAQ,CAACC,IAAT,CAAcd;AAHjB,SAAD,CAAT;AAKH;AACJ,KAfC,EAgBF;AAhBE,KAiBDgB,KAjBC,CAiBK,MAAM;AACTnB,MAAAA,SAAS,CAAC;AACN;AACAE,QAAAA,IAAI,EAAE,OAFA;AAGNC,QAAAA,OAAO,EAAE;AAHH,OAAD,CAAT;AAKH,KAvBC,CAAN;AAwBH,GAtCD;;AAwCA,sBACI;AAAA,2BACI,QAAC,SAAD;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA,gCACI;AAAK,UAAA,SAAS,EAAC,YAAf;AAAA,iCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBADJ,eAII;AAAK,UAAA,SAAS,EAAC,KAAf;AAAA,iCACI,QAAC,IAAD;AAAM,YAAA,EAAE,EAAC,oBAAT;AAA8B,YAAA,SAAS,EAAC,gCAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eASI;AAAI,QAAA,SAAS,EAAC;AAAd;AAAA;AAAA;AAAA;AAAA,cATJ,EAWKJ,MAAM,CAACG,IAAP,KAAgB,OAAhB,gBAA0B,QAAC,KAAD;AAAO,QAAA,KAAK,EAAC,QAAb;AAAA,kBAAuBH,MAAM,CAACI;AAA9B;AAAA;AAAA;AAAA;AAAA,cAA1B,GAA2E,EAXhF,EAaKJ,MAAM,CAACG,IAAP,KAAgB,SAAhB,gBAA4B,QAAC,KAAD;AAAO,QAAA,KAAK,EAAC,SAAb;AAAA,kBAAwBH,MAAM,CAACI;AAA/B;AAAA;AAAA;AAAA;AAAA,cAA5B,GAA8E,EAbnF,eAeI,QAAC,IAAD;AAAM,QAAA,SAAS,EAAC,KAAhB;AAAsB,QAAA,QAAQ,EAAEM,UAAhC;AAAA,gCACI,QAAC,SAAD;AAAW,UAAA,SAAS,EAAC,KAArB;AAAA,kCACI,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI,QAAC,KAAD;AAAO,YAAA,IAAI,EAAC,MAAZ;AAAmB,YAAA,IAAI,EAAC,MAAxB;AAA+B,YAAA,WAAW,EAAC,6BAA3C;AAAsE,YAAA,QAAQ,EAAEL;AAAhF;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAMI,QAAC,SAAD;AAAW,UAAA,SAAS,EAAC,KAArB;AAAA,kCACI,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI,QAAC,KAAD;AAAO,YAAA,IAAI,EAAC,MAAZ;AAAmB,YAAA,IAAI,EAAC,WAAxB;AAAoC,YAAA,WAAW,EAAC,wCAAhD;AAAgF,YAAA,QAAQ,EAAEA;AAA1F;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBANJ,eAYI,QAAC,MAAD;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAsB,UAAA,OAAO,MAA7B;AAA8B,UAAA,KAAK,EAAC,SAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAZJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAfJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAkCH,CA5FM;;GAAMV,gB;;KAAAA,gB","sourcesContent":["import axios from \"axios\";\nimport { useState } from \"react\";\nimport { Link } from \"react-router-dom\"\nimport { Alert, Button, Container, Form, FormGroup, Input, Label, Spinner } from \"reactstrap\"\nimport { api } from \"../../../config\";\n\nexport const CadastrarServico = () => {\n    //o VIEW(Pages), CONTROLLER E MODEL os 3 estão dentro da aplicação o Model da aplicação vai conversar com algo externo que é o Banco de Dados (BD). Os dados do BD (referente as migrations) sobem no modelo do Model (cliente.js, servico.js e pedido.js da api). O Controller vai trabalhar com os serviços (Funcionalidades) e pegar os dados que estão no Views(pages) e trabalhar como objeto de dados (DTO - data transfer object). DTO é igual ao Model quando os serviços são transformados em DTO e mandado para o Model e o model manda pra o BD. o Controller se relaciona com o Servico e o DTO isso garante segurança quando os dados forem pro BD.   \n    //Vamos pegar os dados da Page e transformar em DTO. \n    //nessa funcao a const vai receber os dados servico(GET que vai obter) e setServico(set vai inserir) vai ser usado a funcao useState que vai criar algo exatamente igual ao objeto     \n    const [servico, setServico] = useState({\n        nome: '',\n        descricao: ''\n    });\n\n    const [status, setStatus] = useState({\n        formSave: false,\n        type: '',\n        message: ''\n    });\n    //com objeto criado, vai ser criada uma funcao de entrada (valorInput que vai ser o evento clique no botão [e - p/ representar q é um evento] ). o setServico é uma funcao que vai cadastrar o objeto que vai passar todas as informações do servico, o servico retorna um obejto (os ... representa todo o objeto do servico(nome e descricao) nome do atributo e valor do atributo o target.name vai pegar o nome e a descricao que estão no objeto e o target.value vai atribuir os valores que são inseridos pelo no valorInput lá do formulário. Os(:)representa atribuição).  \n    const valorInput = e => setServico({ ...servico, [e.target.name]: e.target.value })\n\n    //o evento \"e\" (que poderia ser qualquer letra) vai fazer com que a página não recarregue após clicar no cadastrar. o evento vai utilizar a função preventDefault(). A partir do uso dessa função a tela não vai carregar após o clique no botão\n    const cadServico = async e => {\n        console.log(servico)\n        e.preventDefault();\n\n        setStatus({\n         formSave:true\n        });\n        \n        //a const headers vai receber um conteúdo q vai ser no formato json que vai ser encaminhado pela propria aplicacao. \n        const headers = {\n            'Content-Type': 'application/json'\n        };\n\n        //inserção - o que será passado de inf? duas inf. o objeto servico e a os headers (conj de argumentos que estão no valorInput) \n        await axios.post(api + \"/servicos\", servico, { headers })\n            .then((response) => {\n                if (response.data.error) {\n                    setStatus({\n                        //formSave: false,\n                        type: 'error',\n                        message: response.data.message\n                    })\n                } else {\n                    setStatus({\n                        //                 formSave: false,\n                        type: 'success',\n                        message: response.data.message\n                    });\n                }\n            })\n            //o catch vai tratar o erro -> o setStatus vai escrever qual erro ocorreu dentro do type e da message\n            .catch(() => {\n                setStatus({\n                    //             formSave: false,\n                    type: 'error',\n                    message: 'Erro: não conect ao API'\n                });\n            });\n    };\n\n    return (\n        <div>\n            <Container>\n                <div className=\"d-flex\">\n                    <div className=\"m-auto p-2\">\n                        <h1>Cadastrar Serviço</h1>\n                    </div>\n                    <div className=\"p-2\">\n                        <Link to=\"/visualizarservico\" className=\"btn btn-outline-success btn-sm\">Voltar para a lista de Serviços</Link>\n                    </div>\n                </div>\n                <hr className=\"m-1\" />\n\n                {status.type === 'error' ? <Alert color=\"danger\">{status.message}</Alert> : \"\"}\n\n                {status.type === 'success' ? <Alert color=\"success\">{status.message}</Alert> : \"\"}\n\n                <Form className=\"p-2\" onSubmit={cadServico}>\n                    <FormGroup className=\"p-2\">\n                        <Label>Nome</Label>\n                        <Input type=\"text\" name=\"nome\" placeholder=\"Insira o nome do serviço\" onChange={valorInput} />\n                    </FormGroup>\n\n                    <FormGroup className=\"p-2\">\n                        <Label>Descrição</Label>\n                        <Input type=\"text\" name=\"descricao\" placeholder=\"Insira a descrição do serviço\" onChange={valorInput} />\n                    </FormGroup>\n\n                    {/* {status.formSave ? <Button type=\"submit\" outline color=\"success\" disabled>Cadastrando...<Spinner style={{ width: '3rem', height: '3rem' }} type=\"grow\" /></Button> :  */}\n                    <Button type=\"submit\" outline color=\"success\">Cadastrar</Button>\n                </Form>\n            </Container>\n        </div >\n    );\n};"]},"metadata":{},"sourceType":"module"}