{"ast":null,"code":"var _jsxFileName = \"/Users/diogogemaque/Documents/Node Js TI Academy/modulo4/src/pages/Servico/VisualizarServico/index.js\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport { Alert, Container, Table } from \"reactstrap\";\nimport { api } from \"../../../config\";\nimport { useEffect, useState } from \"react\";\nimport { Link } from 'react-router-dom'; //axios utiliza o endereço http://localhost:3000/ - todos os componentes fazem o uso desse endereço\n//api utiliza o endereço http://localhost:3001/\n//GET p/ obter os resultados/recuperar informações (pega)\n//SET p/ alterar/incluir dados (mexe)\n//retornar dados\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const VisualizarServico = () => {\n  _s();\n\n  //onde os dados serão retornados - uma const que vai ser um array[de dados (data) que vai retornar e o dados que vai incluir (setData)] = useState do react\n  //a função do array vazio useState([]) é p/ receber os dados que vamos trabalhar\n  //será feita uma func GET e ela vai receber os dados p/ receber os os dados vai ter o useState([]) que podem ser manipulados pelo setData \n  const [data, setData] = useState([]); //erro = mostrar o erro na tela da aplicação e nao no console.log\n  //criar uma const com um array que contém duas informações [status, setStatus] > no useState vão ser inseridos valores dentro do objeto{}, onde as propriedades do objeto são o tipo do erro(type) e messagem(message). O estado unicial é sem nenhuma informação (vazio ø)\n\n  const [status, setStatus] = useState({\n    type: '',\n    message: ''\n  }); //uma funcao asyncrona é uma funcao que nao precisa necessariamente de um retorno para acontecer ou seja, a gente faz uma requisicao e nao precisa de uma resposta para ir para proxima acao ela é independente\n\n  const getServicos = async () => {\n    //await ñ precisa ficar esperando p/ resolver e vai utilizar o axios que pode ser usado o (get, post, delete, put e todos os outros que fizemos com o postman). Nesse caso sera utilizado o get que vai pegar as informacoes da API(http://localhost:3001) e vai concatenar(+) c/ /listaservicos do controller.js = http://localhost:3001/listaservicos se der certo ele vai responder (.then(response)) c/ console.log e setData que vai trazer um conj de dados que vao vir da tabela servicos (chamado no Controller.js). o catch vai fazer o tratamento desses dados com o retorno de uma mensagem \n    await axios.get(api + \"/listaservicos\").then(response => {\n      console.log(response.data.servicos);\n      setData(response.data.servicos);\n    }) //o catch vai tratar o erro -> o setStatus vai escrever qual erro ocorreu dentro do type e da message\n    .catch(() => {\n      setStatus({\n        type: 'error',\n        message: 'Erro: Não foi possível conectar a API'\n      });\n    });\n  };\n\n  const apagarServico = async idServico => {\n    console.log(idServico);\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    await axios.delete(api + \"/apagarservico/\" + idServico, {\n      headers\n    }).then(response => {\n      console.lop(response.data.error);\n    }).catch(() => {\n      setStatus({\n        type: 'error',\n        message: 'Erro: Não foi possível conectar a API'\n      });\n    });\n  }; //todo objeto precisa ser instanciado > instanciar a função através do useEffect (verificar se ele foi importado) dentro dele é criada uma funcao e dentro da funcao é chamado o getServicos é importante colocar um colchete que é onde o retornado os dados da funcao dentro de um array que nao fique em looping e executar uma vez só\n\n\n  useEffect(() => {\n    getServicos();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-2\",\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: [status.type === 'error' ? /*#__PURE__*/_jsxDEV(Alert, {\n        color: \"warning\",\n        children: status.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 44\n      }, this) : \"\", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"m-auto p-2\",\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Informa\\xE7\\xF5es do Servi\\xE7o\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-2\",\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/cadastrarservico\",\n            className: \"btn btn-outline-success btn-sm\",\n            children: \"Cadastrar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Table, {\n        hover: true,\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Servi\\xE7o\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Descri\\xE7\\xE3o\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"A\\xE7\\xE3o\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: data.map(item =>\n          /*#__PURE__*/\n          // cada linha vai corresponder a uma chave/item único (key) cada item é um conjunto de dados das chaves {} do postman que serão exibidos como cada linha da tabela atraves do <tr> o id vai garantir que seja uma linha única e o td sáo as colunas\n          _jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: item.id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: item.nome\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: item.descricao\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"text-center\",\n              children: [/*#__PURE__*/_jsxDEV(Link, {\n                to: \"/servico0/\" + item.id,\n                className: \"btn btn-outline-primary btn-sm m-2\",\n                children: \"Consultar\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Link, {\n                to: \"/editarservico/\" + item.id,\n                className: \"btn btn-outline-warning btn-sm\",\n                children: \"Editar\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 105,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"btn btn-outline-danger btn-sm m-1\",\n                onClick: () => apagarServico(item.id),\n                children: \"Excluir\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 33\n            }, this)]\n          }, item.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n};\n\n_s(VisualizarServico, \"UJlWsYHKm+xCh7q2yNInJCswg5M=\");\n\n_c = VisualizarServico;\n\nvar _c;\n\n$RefreshReg$(_c, \"VisualizarServico\");","map":{"version":3,"sources":["/Users/diogogemaque/Documents/Node Js TI Academy/modulo4/src/pages/Servico/VisualizarServico/index.js"],"names":["axios","Alert","Container","Table","api","useEffect","useState","Link","VisualizarServico","data","setData","status","setStatus","type","message","getServicos","get","then","response","console","log","servicos","catch","apagarServico","idServico","headers","delete","lop","error","map","item","id","nome","descricao"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { Alert, Container, Table } from \"reactstrap\"\nimport { api } from \"../../../config\";\nimport { useEffect, useState } from \"react\";\nimport { Link } from 'react-router-dom';\n\n//axios utiliza o endereço http://localhost:3000/ - todos os componentes fazem o uso desse endereço\n//api utiliza o endereço http://localhost:3001/\n//GET p/ obter os resultados/recuperar informações (pega)\n//SET p/ alterar/incluir dados (mexe)\n\n//retornar dados\nexport const VisualizarServico = () => {\n\n    //onde os dados serão retornados - uma const que vai ser um array[de dados (data) que vai retornar e o dados que vai incluir (setData)] = useState do react\n    //a função do array vazio useState([]) é p/ receber os dados que vamos trabalhar\n    //será feita uma func GET e ela vai receber os dados p/ receber os os dados vai ter o useState([]) que podem ser manipulados pelo setData \n    const [data, setData] = useState([]);\n\n    //erro = mostrar o erro na tela da aplicação e nao no console.log\n    //criar uma const com um array que contém duas informações [status, setStatus] > no useState vão ser inseridos valores dentro do objeto{}, onde as propriedades do objeto são o tipo do erro(type) e messagem(message). O estado unicial é sem nenhuma informação (vazio ø)\n    const [status, setStatus] = useState({\n        type: '',\n        message: ''\n    });\n\n    //uma funcao asyncrona é uma funcao que nao precisa necessariamente de um retorno para acontecer ou seja, a gente faz uma requisicao e nao precisa de uma resposta para ir para proxima acao ela é independente\n    const getServicos = async () => {\n        //await ñ precisa ficar esperando p/ resolver e vai utilizar o axios que pode ser usado o (get, post, delete, put e todos os outros que fizemos com o postman). Nesse caso sera utilizado o get que vai pegar as informacoes da API(http://localhost:3001) e vai concatenar(+) c/ /listaservicos do controller.js = http://localhost:3001/listaservicos se der certo ele vai responder (.then(response)) c/ console.log e setData que vai trazer um conj de dados que vao vir da tabela servicos (chamado no Controller.js). o catch vai fazer o tratamento desses dados com o retorno de uma mensagem \n        await axios.get(api + \"/listaservicos\")\n            .then((response) => {\n                console.log(response.data.servicos);\n                setData(response.data.servicos);\n            })\n            //o catch vai tratar o erro -> o setStatus vai escrever qual erro ocorreu dentro do type e da message\n            .catch(() => {\n                setStatus({\n                    type: 'error',\n                    message: 'Erro: Não foi possível conectar a API'\n                })\n            });\n    }\n\n    const apagarServico = async (idServico) => {\n        console.log(idServico);\n\n        const headers = {\n            'Content-Type': 'application/json'\n        }\n\n        await axios.delete(api + \"/apagarservico/\" + idServico, { headers })\n            .then((response) => {\n                console.lop(response.data.error);\n            })\n            .catch(() => {\n                setStatus({\n                    type: 'error',\n                    message: 'Erro: Não foi possível conectar a API'\n                });\n            })\n    }\n\n    //todo objeto precisa ser instanciado > instanciar a função através do useEffect (verificar se ele foi importado) dentro dele é criada uma funcao e dentro da funcao é chamado o getServicos é importante colocar um colchete que é onde o retornado os dados da funcao dentro de um array que nao fique em looping e executar uma vez só\n    useEffect(() => {\n        getServicos();\n    }, []);\n\n    return (\n        <div className=\"p-2\">\n            <Container>\n                {/* no reactstrap em componentes selecionar o aleta que deseja copiar e colar e dentro da mensagem colocar a message do status do erro. Importante: importar o Alert do reactstrap. Para que o alerta aparece somente quando der o erro é necessário usar a ação de que se o status.type for igual ao error se(?) o resultado for igual ao error exibir o alerta, caso contrário(:) não exibir nada, ou seja:*/}\n                {status.type === 'error' ? <Alert color=\"warning\">{status.message}</Alert> : \"\"}\n\n                <div className=\"d-flex\">\n                    <div className=\"m-auto p-2\">\n                        <h1>Informações do Serviço</h1>\n                    </div>\n                    <div className=\"p-2\">\n                        <Link to=\"/cadastrarservico\" className=\"btn btn-outline-success btn-sm\">Cadastrar</Link>\n                    </div>\n                </div>\n\n\n                <Table hover>\n                    <thead>\n                        <tr>\n                            <th>ID</th>\n                            <th>Serviço</th>\n                            <th>Descrição</th>\n                            <th>Ação</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {/* o data para cada linha vai inserindo um novo dado e a funcao map que vai pegar cada item do array e colocar na tabela, ou seja, todos os dados que vem do array na resposta vai ser mapeado por itens */}\n                        {data.map(item => (\n                            // cada linha vai corresponder a uma chave/item único (key) cada item é um conjunto de dados das chaves {} do postman que serão exibidos como cada linha da tabela atraves do <tr> o id vai garantir que seja uma linha única e o td sáo as colunas\n                            <tr key={item.id}>\n                                <td>{item.id}</td>\n                                <td>{item.nome}</td>\n                                <td>{item.descricao}</td>\n                                <td className=\"text-center\">\n                                    {/* link no padrão do react-router-dom e importar*/}\n                                    <Link to={\"/servico0/\" + item.id}\n                                        className=\"btn btn-outline-primary btn-sm m-2\">Consultar</Link>\n                                    <Link to={\"/editarservico/\" + item.id}\n                                        className=\"btn btn-outline-warning btn-sm\">Editar</Link>\n                                    <span className=\"btn btn-outline-danger btn-sm m-1\" onClick={() => apagarServico(item.id)}>Excluir</span>\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </Table>\n            </Container>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}